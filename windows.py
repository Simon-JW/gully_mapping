# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# windows.py
# Created on: 2017-06-26 15:28:29.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: windows <fitz_f12_tif> <Foc_test>
# Description:
# ---------------------------------------------------------------------------

# Imports
import arcpy
from arcpy import env
from arcpy.sa import Con
from arcpy.sa import *
import os
import time; t0 = time.time()
import sys

arcpy.CheckOutExtension("Spatial")#Make sure spatial analyst is activated.

################################################################################
#Set working directory.
root_dir = (r'C:\\PhD\\junk')#Set the working directory.
os.chdir(root_dir)

################################################################################
# Local variables:
filename = 'wean1m'
in_rast = os.path.join(root_dir, filename) # provide a default value if unspecified
shape = 'Rectangle ' #Name desired shape exactly with one space before closing quotes.
units = 'CELL' # or 'MAP', no space after
mean = "MEAN" #Can be any of the acceptable operations depending on data type (float or int)
standard_deviation = "STD"
Ignore_NoData_in_calculations = "true" #or change to 'false'

################################################################################
#Set parameters.
mean_threshold = -0.1 # Highest elevation anomaly to be preserved.
stdev_threshold = -0.5 # Highest elevation anomaly to be preserved.
iteration_factor = 10 #This is the value to adjust the window size for each iteration.
range_len = 5 #This is the numer of times you want the loop to iterate through
                #different window sizes. Because Python indexes from 0, the
                #number of files you create will always be 1 less than this value.

################################################################################

#Main program.
for i in range(1,range_len):
    in_height = i * iteration_factor #Specify window height.
    h = str(in_height)#Convert to string for ArcGIS.
    height = h + ' '
    in_width = i * iteration_factor #Specify window width.
    w = str(in_width)#Convert to string for ArcGIS.
    width = w + ' '
    #env.workspace = root_dir
    ############################################################################
    #Window mean.
    mean_out = filename[:2] + '_' + 'm' + '_'  + str(i*iteration_factor)#
    new_m = os.path.join(root_dir,mean_out)
    Neighborhood = str(shape + height + width + units)
    print ('Window specifications', Neighborhood)
    print ('mean raster', new_m)
    # Process: Focal Statistics
    arcpy.gp.FocalStatistics_sa(in_rast, new_m, Neighborhood, mean, Ignore_NoData_in_calculations)
    outName_mean = os.path.join(root_dir, mean_out + 'anom')
    print in_rast
    print new_m
    print outName_mean
    time.sleep(5); print 'sleeping for 5 seconds'
    win_mean = arcpy.gp.Minus_sa(in_rast, new_m, outName_mean)
    final_mean_mask = os.path.join(root_dir, filename[:2] + 'mmask' + str(i*iteration_factor))
    mean_thold= arcpy.gp.LessThanEqual_sa(win_mean, mean_threshold, final_mean_mask)
    final_mean = os.path.join(root_dir, filename[:2] + 'fim'+ str(i*iteration_factor))
    arcpy.gp.Times_sa(final_mean_mask, outName_mean, final_mean)
    ############################################################################
    #Window standarised anomalies.
    stdev_out = filename[:2] + '_' + 's' + '_'  + str(i*iteration_factor)
    new_s = os.path.join(root_dir,stdev_out)
    print ('standard deviation raster', new_s)
    # Process: Focal Statistics
    arcpy.gp.FocalStatistics_sa(in_rast, new_s, Neighborhood, standard_deviation, Ignore_NoData_in_calculations)
    outName_stdev = os.path.join(root_dir, stdev_out + '_r')
    win_std = arcpy.gp.Divide_sa(win_mean, new_s, outName_stdev)
    final_std_mask = os.path.join(root_dir, filename[:2] + 'smask'+ str(i*iteration_factor))
    std_thold = arcpy.gp.LessThanEqual_sa(win_mean, mean_threshold, final_std_mask)
    final_std = os.path.join(root_dir, filename[:2] + 'fis'+ str(i*iteration_factor))
    arcpy.gp.Times_sa(final_std_mask, outName_stdev, final_std)

################################################################################
    #Other optional operations.

    #filt_m = arcpy.Raster(final_mean)
    #filt_s = arcpy.Raster(final_std)
    #bool_m = SetNull(filt_m == 0, 1)
    #bool_s = SetNull(filt_s == 0, 1)
    #mask_mean = os.path.join(root_dir, in_rast[-6:] + 'b_m'+ str(i))
    #mask_stdev = os.path.join(root_dir, in_rast[-6:] + 'b_s'+ str(i))
    #bool_m.save(mask_mean)
    #bool_s.save(mask_stdev)

################################################################################
#Clean up unwanted files.
arcpy.Delete_management(new_m)
arcpy.Delete_management(new_s)

arcpy.Delete_management(outName_stdev)
arcpy.Delete_management(outName_mean)
arcpy.Delete_management(final_mean)
arcpy.Delete_management(final_std)

################################################################################

print ""
print "Time taken: " "hours: %i, minutes: %i, seconds: %i" %(int((time.time()-t0)/3600), int(((time.time()-t0)%3600)/60), int((time.time()-t0)%60))

