# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# windows.py
# Created on: 2017-06-26 15:28:29.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: windows <fitz_f12_tif> <Foc_test>
# Description:
# ---------------------------------------------------------------------------
#Take ~1-2 mins per sub-catchment.

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#THIS WILL THROW A 999999 ERROR IF OTHER ARC APPLICATIONS ARE OPEN
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#Requires:
# 1. DEM.

#Creates:
# 1.

# Imports
import arcpy
from arcpy import env
from arcpy.sa import Con
from arcpy.sa import *
import os
import time; t0 = time.time()
import sys
arcpy.CheckOutExtension("Spatial")#Make sure spatial analyst is activated.

################################################################################
#Set working directory.
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#THIS WILL THROW A 999999 ERROR IF OTHER ARC APPLICATIONS ARE OPEN
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
drive = 'X'
root_dir = drive + ":\PhD\junk"; os.chdir(root_dir)
window_files = 'window_files'
filename = 'mar_54_dem' #This is the input DEM.

#Set parameters.
#mean_threshold = 0 # Highest elevation anomaly to be preserved.
stdev_threshold = 0 # Highest elevation anomaly to be preserved.
iteration_factor = 3 #This is the value to adjust the window size for each iteration.
                    #It is equal to the number of cells to multiply the neighborhood size by for each iteration..
range_len = 2 #This is the numer of times you want the loop to iterate through
                #different window sizes. Because Python indexes from 0, the
                #number of files you create will always be 1 less than this value.

################################################################################
# Local variables:
in_rast = os.path.join(root_dir, filename) # provide a default value if unspecified
shape = 'Circle ' #Name desired shape exactly with one space before closing quotes.
units = 'CELL' # or 'MAP', no space after
mean = "MEAN" #Can be any of the acceptable operations depending on data type (float or int)

out_folder = os.path.join(root_dir, window_files)
os.mkdir(out_folder)

#------------------------------------------------------------------------------#
#Main program.
for i in range(1,range_len):
    radius = i + 2
    radius_string = str(i + 1) + ' ' # This just allows for the radius value to be fed to arc functions as a correctly formatted string.
    #--------------------------------------------------------------------------#
    #Window mean.
    mean_out = filename[:2] + '_' + 'm' + '_'  + str(radius)#
    new_m = os.path.join(out_folder, mean_out)
    Neighborhood = str(shape + radius_string + units)
    print ('Window specifications', Neighborhood)
    print 'mean raster ' + 'for window size ' + str(radius) + ' ' +  new_m
    # Process: Focal Statistics
    print ""
    print "Time taken: " "hours: %i, minutes: %i, seconds: %i" %(int((time.time()-t0)/3600), int(((time.time()-t0)%3600)/60), int((time.time()-t0)%60))
    arcpy.gp.FocalStatistics_sa(in_rast, new_m, Neighborhood, mean, "true")
    print ""
    print "Time taken: " "hours: %i, minutes: %i, seconds: %i" %(int((time.time()-t0)/3600), int(((time.time()-t0)%3600)/60), int((time.time()-t0)%60))
    outName_mean = os.path.join(out_folder, mean_out + 'anom')
    print outName_mean
    print 'sleeping for 5 seconds...'; time.sleep(5)
    print 'now subrtacting ' + new_m + ' from ' + in_rast
    win_mean = arcpy.gp.Minus_sa(in_rast, new_m, outName_mean)#This is DFME.
    for d in range(3,4):
        final_mean_mask = os.path.join(out_folder, filename[:2] + 'mmask' + str(radius) + str(d))#Filename for output mask based on threshold depth.
        print 'sleeping for 5 seconds...'; time.sleep(5)
        mean_threshold = (d/10.0) * -1
        print mean_threshold
        mean_thold= arcpy.gp.LessThanEqual_sa(win_mean, mean_threshold, final_mean_mask)
        final_mean = os.path.join(out_folder, filename[:2] + 'fim'+ str(radius) + str(d))
        arcpy.gp.Times_sa(final_mean_mask, outName_mean, final_mean)
        #Other optional operations.
        filt_m = arcpy.Raster(final_mean)
        bool_m = SetNull(filt_m == 0, 1)
        mask_mean = os.path.join(out_folder, filename[:3] + 'b_m'+ str(radius) + str(d))
        bool_m.save(mask_mean)
        meandiffgul = os.path.join(out_folder, filename[:3] + 'shm'+ str(radius) + str(d))
        arcpy.RasterToPolygon_conversion(mask_mean, meandiffgul, "NO_SIMPLIFY", "VALUE")

    #--------------------------------------------------------------------------#
    #Clean up unwanted anomaly files.
    arcpy.Delete_management(new_m)
    #arcpy.Delete_management(outName_mean)
    #arcpy.Delete_management(final_mean)

#------------------------------------------------------------------------------#
    #Other optional operations.
    #filt_m = arcpy.Raster(final_mean)

    #bool_m = SetNull(filt_m == 0, 1)

    #mask_mean = os.path.join(out_folder, filename[:3] + 'b_m'+ str(i))

    #bool_m.save(mask_mean)

    #meandiffgul = os.path.join(out_folder, filename[:3] + 'shm'+ str(i))

    #arcpy.RasterToPolygon_conversion(mask_mean, meandiffgul, "NO_SIMPLIFY", "VALUE")


#------------------------------------------------------------------------------#
print ""
print "Time taken: " "hours: %i, minutes: %i, seconds: %i" %(int((time.time()-t0)/3600), int(((time.time()-t0)%3600)/60), int((time.time()-t0)%60))

