# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# profile_curvature.py
# Created on: 2017-09-27 18:16:37.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: profile_curvature <curve> <pro_curve> <plan_curve> <Input_raster_or_constant_value_2> <Input_raster_or_constant_value_2__2_> <pprocurve> <nprocurve> <Z_factor>
# Description:
# ---------------------------------------------------------------------------
# Import arcpy module
import arcpy
import os
from arcpy import env
from arcpy.sa import Con
from arcpy.sa import *
import time; t0 = time.time()
import sys
arcpy.CheckOutExtension("Spatial")#Make sure spatial analyst is activated.

################################################################################
#Set working directory.
drive = 'X'
root_dir = drive + ":\PhD\junk"; os.chdir(root_dir)
out_folder = drive + ":\PhD\junk"

################################################################################
#Basic inputs and outputs.
filename = 'mar38'
DEM = os.path.join(root_dir,  filename) #Input DEM.

################################################################################
#Adjustable parameters.

Z_factor = "1"
range_len = 2 #This is the numer of times you want the loop to iterate through
                #different window sizes. Because Python indexes from 0, the
                #number of files you create will always be 1 less than this value.
minprocurve = -1
maxprocurve = 1

################################################################################
#Main program.
for i in range(1,range_len):
    print 'profile curvature ' + '+-' + str(i)
    min = str(i * minprocurve)#Minimum.
    max = str(i * maxprocurve)#Maximum.
    base = 'curvature' + str(i)
    curve = os.path.join(root_dir, base) #Input DEM.
    pro_curve = os.path.join(root_dir, 'pro' + filename + str(i))#Output profile curvature raster.
    pprocurve = os.path.join(root_dir, 'p' + 'pro' + filename + str(i))#p==positive and corresponds to max, above.
    mpprocurve = os.path.join(root_dir, 'm' + 'p' + 'pro' + filename + str(i))
    nprocurve = os.path.join(root_dir, 'n' + 'pro' + filename + str(i))#n==negative and corresponds to min, above.
    mnprocurve = os.path.join(root_dir, 'm' + 'n' + 'pro' + filename + str(i))
    p_plus_n = os.path.join(root_dir, 'n' + 'p' + 'pro' + filename + str(i))#Combining max and min filtered rasters.
    filtprocurve = os.path.join(root_dir, 'f' + 'pro' + filename + str(i))
    inverse = os.path.join(root_dir, 'inv' + 'pro' + filename + str(i))
    #nullprocurve = os.path.join(root_dir, 'null' + 'pro' + filename)
    pfiltprocurve = os.path.join(root_dir, 'p' + 'f' + 'pro' + filename + str(i))
    scaled_procurve = os.path.join(root_dir, 'sc' + 'pro' + filename + str(i))
    arcpy.gp.Curvature_sa(DEM, curve, Z_factor, pro_curve); time.sleep(2)
    arcpy.gp.GreaterThanEqual_sa(pro_curve, max, pprocurve); time.sleep(2)
    arcpy.gp.Times_sa(pprocurve, max, mpprocurve);time.sleep(2)
    arcpy.gp.LessThanEqual_sa(pro_curve, min, nprocurve);time.sleep(2)
    arcpy.gp.Times_sa(nprocurve, min, mnprocurve);time.sleep(2)
    arcpy.gp.Plus_sa(pprocurve, nprocurve, p_plus_n);time.sleep(2)
    arcpy.gp.Minus_sa("1", p_plus_n, inverse);time.sleep(2)
    #arcpy.gp.SetNull_sa(inverse, "1", nullprocurve, "")
    arcpy.gp.Times_sa(inverse, pro_curve, filtprocurve);time.sleep(2)
    arcpy.gp.Plus_sa(mpprocurve, filtprocurve, pfiltprocurve);time.sleep(2)
    arcpy.gp.Plus_sa(mnprocurve, pfiltprocurve, scaled_procurve);time.sleep(2)
    print 'Sleeping for 5 seconds...'
    time.sleep(5)
    arcpy.Delete_management(pro_curve, "")
    arcpy.Delete_management(pprocurve, "")
    arcpy.Delete_management(nprocurve, "")
    arcpy.Delete_management(curve, "")
    arcpy.Delete_management(p_plus_n, "")
    arcpy.Delete_management(inverse, "")
    arcpy.Delete_management(mpprocurve, "")
    arcpy.Delete_management(mnprocurve, "")
    arcpy.Delete_management(filtprocurve, "")
    arcpy.Delete_management(pfiltprocurve, "")


################################################################################
print ""
print "Time taken:"
print "hours: %i, minutes: %i, seconds: %i" %(int((time.time()-t0)/3600), int(((time.time()-t0)%3600)/60), int((time.time()-t0)%60))


