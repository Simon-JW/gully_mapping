# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# stream_order.py
# Created on: 2017-08-19 14:12:34.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: stream_order <Expand_raste1> <rastercalc1> <StreamO_rast1> <rastercalc> <Output_accumulation_raster> <Output_flow_direction_raster> <Fill_don_501> <don_50>
# Description:
# ---------------------------------------------------------------------------

#Imports.

import arcpy
import os
from arcpy import env
from arcpy.sa import Con
from arcpy.sa import *
import time; t0 = time.time()
import sys
arcpy.CheckOutExtension("Spatial")#Make sure spatial analyst is activated.

################################################################################
#Set the working directory.

root_dir = (r'C:\\PhD\\junk')
os.chdir(root_dir)
################################################################################

# Local variables:
input_catchments = "C:\PhD\junk\Mary_subcatchments_mgaz56.shp"
target_basin = "SC #463" #Needs to be full basin code e.g. 'SC #420' as a string.
bas = "bas"
Use_Input_Features_for_Clipping_Geometry = "true"
dem_file = "mary_5m"
root = r"C:\\PhD\\junk"
dem = os.path.join(root, dem_file)
out_folder = "C:\\PhD\\junk"
os.chdir(root)
Statistics_type = "MINIMUM"
Output_drop_raster = os.path.join(out_folder, dem[:3] + 'drop')
flowdir = os.path.join(out_folder, dem[:3] + 'fdir')
sink = os.path.join(out_folder, dem[:3] + 'sink')
watershed = os.path.join(out_folder, dem[:3] + 'wshd')
min_h = os.path.join(out_folder, dem[:3] + 'min')
max_h = os.path.join(out_folder, dem[:3] + 'max')
sink_depth = os.path.join(out_folder, dem[:3] + 'dpth')
expand = "2"

################################################################################

# Process: Make Feature Layer
arcpy.MakeFeatureLayer_management(input_catchments, bas, "", "", "FID FID VISIBLE NONE;Shape Shape VISIBLE NONE;Id Id VISIBLE NONE;gridcode gridcode VISIBLE NONE")
#This is required because SelectByFeature and SelectByAttribute do not work on shape files using arcpy. Hence they need to first be convereted to feature layers.

#Look at what field names are in the shape file table.

fields = [f.name for f in arcpy.ListFields(bas)]#Just tells me what field names the data has.

print len(fields)

print fields

cursor = arcpy.da.SearchCursor(bas, [fields[0], fields[1], fields[2], fields[3], fields[4]])

################################################################################

for row in cursor:
    if row[4] == target_basin:
        FID_val = row[0]
        arcpy.SelectLayerByAttribute_management(bas, "NEW_SELECTION", "\"FID\" = " + str(FID_val))
        #arcpy.FeatureClassToFeatureClass_conversion (bas, out_folder, "area" + str(FID_val)). Use this to save all of the shape files.
        dem_raster = arcpy.sa.Raster(dem)
        clip_shape = bas
        left = int(dem_raster.extent.XMin)
        right = int(dem_raster.extent.XMax)
        top = int(dem_raster.extent.YMax)
        bottom = int(dem_raster.extent.YMin)
        new = os.path.join(out_folder, dem[-7:-3] + target_basin[4:])
        extent = str(left) + ' ' + str(bottom) + ' ' + str(right) + ' ' + str(top)
        arcpy.Clip_management(dem, extent, new, clip_shape, "-999", Use_Input_Features_for_Clipping_Geometry, "NO_MAINTAIN_EXTENT")
        #print new
        print new
        ################################################################################

        input_dem = mary_fill # provide a default value if unspecified
        Output_drop_raster = ""
        Method_of_stream_ordering = "STRAHLER"

        fill_dem = os.path.join(root_dir, input_dem[-13:-8] + 'f')
        flow_dir = os.path.join(root_dir, input_dem[-13:-8] +'dir')
        flow_acc = os.path.join(root_dir, input_dem[-13:-8] +'fa')
        streams = os.path.join(root_dir, input_dem[-13:-8] +'str')
        stream_order = os.path.join(root_dir, input_dem[-13:-8] +'ord')
        filt_stream_order = os.path.join(root_dir, input_dem[-13:-8] +'f_ord')
        null_filt_stream_order = os.path.join(root_dir, input_dem[-13:-8] +'nf_ord')
        expand_filt_streams = os.path.join(root_dir, input_dem[-13:-8] +'ef_ord')

        ################################################################################

        arcpy.gp.Fill_sa(input_dem, fill_dem, ""); print 'fill works'
        arcpy.gp.FlowDirection_sa(fill_dem, flow_dir, "NORMAL", Output_drop_raster); print 'flow direction works'
        arcpy.gp.FlowAccumulation_sa(flow_dir, flow_acc, "", "FLOAT"); print 'flow accumulation works'
        flow_acc_rast = arcpy.Raster(flow_acc); print 'flow accumulation raster saved'
        strms  = Con(flow_acc_rast >= 1000,1,0); print 'Raster calculator for streams => 1000 works'
        stream = strms.save(streams); print 'stream raster saved'
        arcpy.gp.StreamOrder_sa(streams, flow_dir, stream_order, Method_of_stream_ordering); print 'stream orders work'
        stream_ord_rast = arcpy.Raster(stream_order); print 'stream order raster saved'
        flt_strm_ord = Con(stream_ord_rast >= 5,1,0); print 'stream order >= threshold filtered out'
        fil_or_st = flt_strm_ord.save(filt_stream_order); print 'filtered stream orders saved'
        fil_or_st_rast = arcpy.Raster(filt_stream_order);
        null_strm_ord = SetNull(fil_or_st_rast == 0, fil_or_st_rast)
        nul_or_st = null_strm_ord.save(null_filt_stream_order); print 'nulled filtered stream orders saved'
        arcpy.gp.Expand_sa(null_filt_stream_order, expand_filt_streams, expand, "1")

################################################################################
print ""
print "Time taken: " "hours: %i, minutes: %i, seconds: %i" %(int((time.time()-t0)/3600), int(((time.time()-t0)%3600)/60), int((time.time()-t0)%60))

